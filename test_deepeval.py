from langchain_experimental.text_splitter import SemanticChunker
from langchain_openai.embeddings import OpenAIEmbeddings
from deepeval import assert_test, evaluate
from deepeval.test_case import LLMTestCase, LLMTestCaseParams
from deepeval.metrics import AnswerRelevancyMetric, FaithfulnessMetric,GEval
from dotenv import load_dotenv
load_dotenv()
#This script uses DeepEval framework to evaluate the final output. Not Integrated Yet
#Go through the documentation provided here to understand the procedure to run the evaluation separately: 
#https://docs.confident-ai.com/docs/getting-started


#The original content of the PRD
prd_content ="""

  ProjectZen PRD

Introduction   1.1 Purpose    This document outlines the product requirements for the ProjectZen tool. It aims to provide a    comprehensive description of the tool's features, functionalities, and constraints to guide the.      development process..       1.2 Document Conventions.  ProjectZen:. Name of the tool defined on this document.  1.3 Intended Audience and Reading Suggestions.  Identify the primary audience for this document, such as product managers, developers,.  designers, and stakeholders, and suggest sections that are most relevant to each group..  1.4 Project Scope.  Project Overview:. ProjectZen is designed to automate. the repetitive day-to-day tasks that.  consume a significant portion of product managers' time. The tool aims to enhance.  efficiency, allowing product managers to focus on strategic decision-making and innovation..  By automating routine tasks, ProjectZen will help in improving productivity, reducing errors,.  and ensuring consistent execution of repetitive workflows..  Objectives:.  ●.  Automate Routine Tasks:. Develop features that automatically. handle common,.  repetitive tasks, such as updating status reports, scheduling meetings, and sending.  follow-up emails..  ●.  Improve Accuracy:. Reduce human error by automating. data entry, report.  generation, and other manual processes..  ●.  Save Time:. Enable product managers to dedicate more. time to high-value activities.  by minimizing the time spent on mundane tasks..  ●.  Enhance Workflow Integration:. Ensure seamless integration. with existing tools and.  systems used by product managers to create a unified workflow..  Key Features:.  1..  Automated Reporting:. Automatically generate and distribute. status reports,.  progress updates, and other regular documentation based on predefined templates.  and data inputs..  2..  Tasks Automatic Creation Based on User Stories:. Automatically create tasks.  based on user stories defined in the Product Requirements Document (PRD).  3..  Dynamic Gantt Chart:. Provide a dynamic Gantt chart. that visualizes the project.  timeline based on how tasks are being managed and updated..  4..  Task Scheduling:. Automate the scheduling of recurring. tasks, meetings, and.  reminders, with the ability to sync with calendars and project management tools..  5..  Email Automation:. Automatically draft and send follow-up. emails, reminders, and.  notifications to team members, stakeholders, and clients based on task statuses and.  deadlines..  6..  Integration with Existing Tools:. Seamlessly integrate. with popular project.  management, communication, and collaboration tools such as Jira, Asana, Slack,.  and Microsoft Teams..  7..  Analytics and Insights:. Provide analytics and insights. into task completion times,.  productivity gains, and areas for further optimization..  Target Audience:. ProjectZen is aimed at product managers. in medium to large-sized.  enterprises across various industries, including technology, manufacturing, and retail. The.  tool is designed for product managers who are responsible for coordinating multiple projects,.  managing cross-functional teams, and ensuring timely delivery of product features and.  updates..  Out of Scope:.  ●.  Advanced machine learning algorithms for predictive analytics..  ●.  Deep integration with enterprise-level ERP systems..  ●.  Features focused on non-product management roles..  Assumptions:.  ●.  Users have basic proficiency with common project management and communication.  tools..  ●.  The tool will be deployed as a cloud-based solution, accessible through web.  browsers and mobile applications..  ●.  Initial development will prioritize core automation features, with plans for additional.  enhancements based on user feedback and evolving needs..  Dependencies:.  ●.  Reliable integration with third-party project management and communication tools.  (e.g., Jira, Asana, Slack)..  ●.  Stable and secure cloud infrastructure for hosting and data storage..  ●.  Access to user feedback and real-world use cases to guide continuous improvement.1.5 References List any reference materials or documents that have influenced the requirements outlined in this document.
Overall Description.  2.1 Product Perspective.  Context and Origin:. ProjectZen is developed to address. the inefficiencies product.  managers face due to repetitive and time-consuming tasks. The tool is conceived as a.  modular, cloud-based application that integrates seamlessly with existing project.  management, communication, and collaboration tools. By automating routine processes,.  ProjectZen aims to free up product managers' time for strategic planning and innovation..  Role and Functionality:. ProjectZen serves as an automation. layer within the product.  management workflow. It acts as a central hub that connects with various project.  management and communication tools to streamline and automate tasks. The key.  functionalities include task automation, dynamic project visualization, automated reporting,.  and seamless integration with other tools..  System Interfaces and Dependencies:. ProjectZen interacts. with several third-party tools to.  provide a cohesive user experience. Key interfaces and dependencies include:.  ●.  Project Management Tools:. Integration with tools like. Jira, Asana, and Trello to.  automate task creation, updates, and progress tracking..  ●.  Communication Tools:. Integration with communication. platforms such as Slack and.  Microsoft Teams to automate notifications, reminders, and follow-ups..  ●.  Calendar Applications:. Syncing with calendar apps. like Google Calendar and.  Outlook to automate scheduling of tasks, meetings, and reminders..  ●.  Email Systems:. Integration with email services to. automate the drafting and sending.  of follow-up emails and status updates..  User Environment:. ProjectZen is designed to be a cloud-based. solution, accessible via.  web browsers and mobile applications. This ensures that product managers can access and.  manage their tasks from anywhere, providing flexibility and convenience. The user interface.  is intuitive and user-friendly, designed to accommodate varying levels of technical.  proficiency..  Integration and Workflow:. ProjectZen enhances existing. workflows by automating manual.  and repetitive tasks. It integrates with current systems used by product managers, pulling.  and pushing data as needed to maintain consistency across platforms. This integration.  ensures that updates in one tool are reflected in ProjectZen and vice versa, creating a.  synchronized and efficient workflow..  Relationship to Other Systems:. ProjectZen complements. existing project management.  and collaboration tools rather than replacing them. It adds value by automating tasks that are.  typically manual and repetitive, thereby enhancing the overall efficiency of the product.  management process. The tool’s modular architecture allows for easy integration and.  customization to fit the unique needs of different organizations..  Advantages Over Existing Solutions:. While there are several project management and.  automation tools available, ProjectZen distinguishes itself through its specific focus on.  automating the day-to-day tasks of product managers. Key advantages include:.  ●.  Comprehensive Automation:. From task creation based. on PRD user stories to.  dynamic Gantt chart updates, ProjectZen covers a wide range of automation needs..  ●.  Seamless Integration:. Deep integration capabilities. with popular tools ensure that.  ProjectZen fits seamlessly into existing workflows..  ●.  User-Centric Design:. The tool is designed with product. managers in mind, ensuring.  that its features and functionalities directly address their pain points and enhance.  productivity..  2.2 Product Features.  This section outlines the main features of ProjectZen, detailing their functionalities and the.  benefits they provide to product managers. The focus is on automating repetitive tasks,.  enhancing collaboration, and providing valuable insights to streamline project management.  processes.. 
Tasks Generation from the PRD:.  ●.  Description:. Automatically create tasks based on user. stories defined in the Product.  Requirements Document (PRD)..  ●.  Functionality:.  ○.  ProjectZen parses the PRD to identify and extract user stories..  ○.  Converts user stories into actionable tasks..  ○.  Assigns tasks to appropriate team members with relevant details, deadlines,.  and priorities..  ●.  Benefits:.  ○.  Ensures all user stories are promptly converted into actionable tasks..  ○.  Reduces manual effort in task creation..  ○.  Maintains alignment between the PRD and project tasks, ensuring.  consistency and completeness.. 
Dynamic Gantt Chart:.  ●.  Description:. Provide a dynamic Gantt chart that visualizes. the project timeline and.  automatically adjusts based on real-time updates..  ●.  Functionality:.  ○.  Visual representation of project tasks, milestones, and dependencies..  ○.  Real-time updates reflecting changes in task statuses, deadlines, and.  dependencies..  ○.  Drag-and-drop interface for manual adjustments and fine-tuning..  ●.  Benefits:.  ○.  Offers a clear visual representation of project progress and timelines..  ○.  Helps identify potential delays and bottlenecks early..  ○.  Allows for easy tracking and adjustment of task dependencies and schedules.. 
Scheduling of Meetings and Communications:.  ●.  Description:. Automate the scheduling of meetings and communications, including.  drafts and suggestions for emails and messages..  ●.  Functionality:.  ○.  Integrates with calendar apps to schedule meetings based on team.  availability..  ○.  Sends automatic reminders and follow-ups for meetings and important.  deadlines..  ○.  Provides templates and suggestions for communication drafts, ensuring.  consistent and effective messaging..  ●.  Benefits:.  ○.  Streamlines the scheduling process, reducing the time spent on organizing.  meetings..  ○.  Ensures timely and consistent communication between departments and the.  PM..  ○.  Improves overall coordination and collaboration within the team.. 
Integration with Existing Tools:.  ●.  Description:. Seamlessly integrate with popular project. management,.  communication, and collaboration tools..  ●.  Functionality:.  ○.  Provides integration modules for tools like Jira, Asana, Slack, Microsoft.  Teams, Google Calendar, and Outlook..  ○.  Synchronizes data across platforms to maintain consistency..  ○.  Supports bi-directional data flow, ensuring updates in one tool are reflected in.  ProjectZen and vice versa..  ●.  Benefits:.  ○.  Enhances workflow efficiency by connecting all the tools product managers.  use..  ○.  Eliminates data silos, providing a unified view of project information..  ○.  Reduces the need for manual data entry and updates across multiple.  platforms.. 
Analytics:.  ●.  Description:. Provide analytics and insights into task. completion times, productivity.  gains, and areas for further optimization..  ●.  Functionality:.  ○.  Collects data on task management, project progress, and team performance..  ○.  Generates detailed reports and visualizations to highlight key metrics and.  trends..  ○.  Offers actionable insights and recommendations for improving productivity.  and efficiency..  ●.  Benefits:.  ○.  Helps product managers make data-driven decisions..  ○.  Identifies bottlenecks and areas for improvement in the workflow..  ○.  Provides visibility into team performance and project health..  2.3 User Classes and Characteristics.  The User Classes and Characteristics section identifies the primary user groups or personas.  who will interact with ProjectZen. It provides insights into their roles, responsibilities, and.  how they are expected to engage with the software tool. This section helps in tailoring the.  user experience and functionality to meet the specific needs of each user class.. 
Product Managers:.  ●.  Role:. Lead the planning, development, and execution. of product initiatives..  ●.  Characteristics:.  ○.  Responsible for defining product requirements and priorities..  ○.  Coordinate cross-functional teams and ensure alignment with business.  objectives..  ○.  Need visibility into project timelines, progress, and resource allocation..  ●.  Interaction with ProjectZen:.  ○.  Use ProjectZen to automate task creation from PRD user stories..  ○.  Monitor project progress through dynamic Gantt charts..  ○.  Schedule meetings and communications, and track team activities..  ○.  Utilize analytics to assess project performance and make data-driven.  decisions.. 
Stakeholders (Executives, Clients, External Partners):.  ●.  Role:. Provide oversight, feedback, and approvals throughout. the project lifecycle..  ●.  Characteristics:.  ○.  Interested in project milestones, deliverables, and overall progress..  ○.  Require regular updates and transparent communication from the project.  team..  ○.  Have decision-making authority and influence project direction..  ●.  Interaction with ProjectZen:.  ○.  Receive automated reports and updates on project status and progress..  ○.  Access real-time project data and analytics to evaluate performance..  ○.  Provide feedback and approvals through integrated communication and.  collaboration tools..  ○.  Use ProjectZen as a platform for transparent communication and.  collaboration with the project team..  2.4 Operating Environment.  ProjectZen will operate in a cloud-based environment to provide flexibility and accessibility..  Below are the specifics of the operating environment:.  ●.  Software Stack.  :.  ○.  Backend.  : Python Flask or Django application..  ○.  Containers.  : All components will run in Docker containers..  ○.  Task Management.  : Celery for running agents and managing. asynchronous.  tasks..  ○.  Logging.  : Logs will be streamed to a file for monitoring. and debugging..  ●.  Hosting.  : Hosted on cloud platforms such as AWS or Azure..  ●.  User Interface.  : Results will be formatted and displayed. in a UI for user verification.  before being pushed to the chosen project management tool like Jira or Asana..  2.5 Design and Implementation Constraints.  ●.  Technology Choices.  :.  ○.  Frontend.  : React.js for the user interface..  ○.  Backend.  : Python Flask or Django for server-side processing..  ○.  Task Management.  : Celery for asynchronous task handling..  ○.  Containers.  : Docker for containerization..  ●.  Third-Party Integrations.  : Compliance with APIs of. Jira, Asana, Slack, SMTP.  Emaling..  ●.  Compliance Requirements.  : Adherence to data protection. regulations like GDPR.  (General Data Protection Regulation) and CCPA (California Consumer Privacy Act)..  2.6 Assumptions and Dependencies.  ●.  Assumptions.  :.  ○.  Users have basic proficiency with common project management and.  communication tools..  ○.  The tool will be primarily cloud-based, with mobile accessibility as a.  secondary feature..  ○.  Initial development will focus on core automation features, with plans for.  additional enhancements based on user feedback..  ●.  Dependencies.  :.  ○.  Reliable integration with third-party project management and communication.  tools..  ○.  Stable and secure cloud infrastructure for hosting and data storage..  ○.  Continuous access to user feedback and real-world use cases to guide.  ongoing improvements.. 
Functional Requirements.  3.1 Feature 1: Tasks Generation from the PRD.  3.1.1. Description.  : Automatically create tasks based. on user stories defined in the Product.  Requirements Document (PRD)..  3.1.2. Functional Requirements.  :.  ●.  FR-1.1.  : The system shall parse the PRD to extract. user stories..  ●.  FR-1.2.  : The system shall convert user stories into. actionable tasks..  ●.  FR-1.3.  : The system shall assign tasks to appropriate. team members with relevant.  details, deadlines, and priorities..  3.1.3. User Stories.  :.  ●.  As a product manager, I want the system to automatically generate tasks from the.  PRD so that I can save time on manual task creation..  ●.  As a developer, I want to receive detailed tasks automatically created from user.  stories to streamline my workflow..  3.1.4. Acceptance Criteria.  :.  ●.  Verify that tasks are correctly generated from a sample PRD..  ●.  Ensure tasks include all necessary details (assignee, deadline, priority)..  ●.  Test with different PRD formats to ensure consistent parsing and task creation..  3.2 Feature 2: Dynamic Gantt Chart.  3.2.1. Description.  : Provide a dynamic Gantt chart that. visualizes the project timeline and.  automatically adjusts based on real-time updates..  3.2.2. Functional Requirements.  :.  ●.  FR-2.1.  : The system shall provide a visual representation. of project tasks, milestones,.  and dependencies..  ●.  FR-2.2.  : The system shall update the Gantt chart in. real-time based on task status.  changes..  ●.  FR-2.3.  : The system shall allow users to manually adjust. the Gantt chart through a.  drag-and-drop interface..  3.2.3. User Stories.  :.  ●.  As a project manager, I want to see a visual representation of the project timeline so.  that I can easily track progress and identify delays..  ●.  As a team leader, I want to adjust task dependencies and deadlines on the Gantt.  chart to reflect changes in project plans..  3.2.4. Acceptance Criteria.  :.  ●.  Verify that the Gantt chart accurately reflects the project timeline and updates in.  real-time..  ●.  Ensure the drag-and-drop interface works smoothly for adjusting tasks and.  dependencies..  3.3 Feature 3: Scheduling of Meetings and Communications.  3.3.1. Description.  : Automate the scheduling of meetings. and communications, including.  drafts and suggestions for emails..  3.3.2. Functional Requirements.  :.  ●.  FR-3.1.  : The system shall integrate with calendar apps. to schedule meetings based.  on team availability..  ●.  FR-3.2.  : The system shall send automatic reminders and follow-ups for meetings and.  important deadlines..  ●.  FR-3.3.  : The system shall provide templates and suggestions. for communication.  drafts to ensure consistent messaging..  3.3.3. User Stories.  :.  ●.  As a project coordinator, I want the system to automate meeting scheduling so that I.  can save time and ensure team availability..  ●.  As a product manager, I want to receive automatic reminders for upcoming deadlines.  to stay on track with project milestones..  3.3.4. Acceptance Criteria.  :.  ●.  Verify that the system schedules meetings accurately based on team availability..  ●.  Ensure reminders and follow-ups are sent automatically and are received on time..  ●.  Test the effectiveness and relevance of communication templates and suggestions..  3.4 Feature 4: Integration with Existing Tools.  3.4.1. Description.  : Seamlessly integrate with popular. project management, communication,.  and collaboration tools..  3.4.2. Functional Requirements.  :.  ●.  FR-4.1.  : The system shall provide integration modules. for tools like Jira, Asana,.  Slack, Microsoft Teams, Google Calendar, and Outlook..  ●.  FR-4.2.  : The system shall synchronize data across platforms. to maintain consistency..  ●.  FR-4.3.  : The system shall support bi-directional data. flow, ensuring updates in one.  tool are reflected in ProjectZen and vice versa..  3.4.3. User Stories.  :.  ●.  As a product manager, I want ProjectZen to integrate with my existing tools so that I.  can streamline my workflow without switching between multiple platforms..  ●.  As a developer, I want task updates in Jira to be reflected in ProjectZen in real-time.  to ensure synchronization..  3.4.4. Acceptance Criteria.  :.  ●.  Verify that the integration modules work correctly with each third-party tool..  ●.  Ensure data synchronization is consistent and reflects real-time updates across.  platforms..  ●.  Test bi-directional data flow to confirm updates in one tool are mirrored in ProjectZen..  3.5 Feature 5: Analytics.  3.5.1. Description.  : Provide analytics and insights. into task completion times, productivity.  gains, and areas for further optimization..  3.5.2. Functional Requirements.  :.  ●.  FR-5.1.  : The system shall collect data on task management,. project progress, and.  team performance..  ●.  FR-5.2.  : The system shall generate detailed reports. and visualizations to highlight key.  metrics and trends..  ●.  FR-5.3.  : The system shall offer actionable insights. and recommendations for.  improving productivity and efficiency..  3.5.3. User Stories.  :.  ●.  As a product manager, I want to access analytics and insights to make data-driven.  decisions and improve project outcomes..  ●.  As a team leader, I want to identify bottlenecks and areas for improvement to.  optimize team performance..  3.5.4. Acceptance Criteria.  :.  ●.  Verify that the system collects and processes data accurately..  ●.  Ensure reports and visualizations are clear, informative, and easy to understand..  ●.  Test the relevance and usefulness of the provided insights and recommendations.. 
Non-Functional Requirements.  4.1 Performance Requirements.  ●.  The system shall respond to user requests within 2 seconds..  ●.  The system shall handle up to 1000 concurrent users without performance.  degradation..  4.2 Security Requirements.  ●.  The system shall use OAuth 2.0 for user authentication..  ●.  Data at rest and in transit shall be encrypted using AES-256..  ●.  Regular security patches and updates shall be applied to the system..  4.3 Usability Requirements.  ●.  The user interface shall be designed following modern UX principles..  ●.  The system shall comply with WCAG 2.1 accessibility standards..  ●.  The system shall provide comprehensive user documentation and tutorials..  4.4 Reliability Requirements.  ●.  The system shall maintain an uptime of 99.9%..  ●.  Error rates shall not exceed 0.1%..  ●.  The system shall include automated backup and recovery procedures..  4.5 Maintainability and Support Requirements.  ●.  The codebase shall be documented with inline comments and external.  documentation..  ●.  Support processes shall include a ticketing system for bug reports and feature.  requests..  ●.  The system shall be designed for easy updates and maintenance with minimal.  downtime..  4.6 Scalability Requirements.  ●.  The system shall scale horizontally to handle increased load..  ●.  The database shall be capable of handling growth in data volume up to 10TB..  ●.  The system architecture shall support the addition of new features and integrations.  without significant refactoring.. 
External Interface Requirements.  5.1 User Interfaces.  ●.  Login Screen.  : Wireframe TBD, includes fields for username. and password..  ●.  Dashboard.  : Mockup TBD, displays project summary, task. list, and Gantt chart..  ●.  Task Definition.  : Interaction flow provided..  ●.  Task Management.  : Includes task creation, assignment,. and tracking. Managed.  through Dynamic Gantt chart..  5.2 API Interfaces.  ●.  Task Creation API.  :.  ○.  Endpoint.  : /api/tasks/create.  ○.  Method.  : POST.  ○.  Request Body.  : { "userStoryId": "123", "taskDetails":. { "assignee": "user",.  "deadline": "date", "priority": "high" } }.  ○.  Response.  : { "taskId": "456", "status": "created" }.  5.4 External Interfaces.  ●.  Jira Integration.  :.  ○.  Endpoints.  : TBD.  ○.  Data Format.  : JSON.  ○.  Communication Protocol.  : REST API.  ●.  Asana Integration.  :.  ○.  Endpoints.  : TBD.  ○.  Data Format.  : JSON.  ○.  Communication Protocol.  : REST API.  ●.  ….  5.5 Communication Interfaces.  ●.  Slack integration:.  ○.  ….  ●.  Email Notifications.  :.  ○.  Protocol.  : SMTP.  ○.  Data Format.  : JSON.  ○.  Endpoints.  : /api/notifications/email. 
Other Requirements.  6.1 Legal and Regulatory Requirements.  ●.  The system shall comply with GDPR for data protection and privacy..  ●.  The system shall adhere to CCPA for user data rights..  6.2 Localization Requirements.  ●.  The system shall support English, with eventual translations to Spanish at least..  ●.  Regional settings for date and time formats shall be configurable..  6.3 Other Requirements.  ●.  Any additional requirements not covered in other sections shall be documented here..  Appendix.  A. Agent Definition.  Tentatively, we will use the CrewAI framework to define and run agents and tasks.. 
Tasks Generation from the PRD:.  User Input:. PRD, [v1.5] (Stack, human team definition),. [v2] (Product Access / Link /.  Documentation).  -.  Agents involved:.  -.  Product Manager:.  -.  definition: You process PRDs.  -.  backstory: ….  -.  tools: Document reader.  -.  Product Owner:.  -.  definition.  : You are a product owner with knowledge of your product.  that translates product features into descriptive user stories.  -.  backstory.  : ….  -.  tools.  : Website/Confluence/Github Reader / (Ideal:. Selenium tester).  -.  Technical Product Manager:.  -.  definition.  : … TPM that understands the stack and how. to make.  features a reality. Your job is to define technical tasks taken from.  stories..  -.  backstory.  : ….  -.  tools.  :.  -.  Developer Agent * [v2] Crew.  -.  definition.  : … Software developer that knows how to. do the work..  Your job is to estimate the work required for technical tasks..  -.  backstory.  : ….  -.  tools.  : [v1.5] (Github Reader).  -.  *Crew depends on human roles. [Crew of devs/ux/DevOps/qa/]:. 
Tasks involved:.  -.  PRD Processing into stories.  -.  agent:. Product Manager.  -.  input:. PRD (pdf or doc).  -.  description:. PRD Processing into feature definitions.  -.  expected output:. Product Feature Requirements (non-dependent. on.  what’s existing).  -.  Existing Product Analysis. [v2].  -.  agent:. Product Owner.  -.  input:. Company/Product Description || Website.  -.  description:. Take information from company or website. to define.  what the existing product already does. Stack, and other.  dependencies.  -.  expected output:. Stack.  -.  User Story Definition.  -.  agent.  : Product Owner.  -.  input.  : Product Feature Requirements, [1.5] (Stack),.  [v2] Existing.  Product Analysis.  -.  description.  : knowing the product, for each feature. breaking it down.  into user stories, expanding based on what already exists in the.  product.  -.  expected output.  : Specific detailed Stories.  -.  Technical Task Definition:.  -.  agent.  : Technical Product Manager.  -.  input.  : Specific detailed Stories (one by one), [v1.5]. (Stack).  -.  description.  : Takes the stories and knowledge of the. products to.  create technical descriptions, and the menial subtasks for each.  member of the team..  -.  expected output.  : Technical definition with subtasks for specific Roles.  (Fullstack, UX, Devops…) and the dependency between them..  -.  Task Effort Estimation.  -.  agent.  : Developer *Crew.  -.  input.  : Subtask [one by one], [v1.5] (Stack, Fibo vs. T-Shirts).  -.  description.  : Takes the task and estimates the effort. based on a scale.  -.  expected output.  : Estimation of each individual task.  [v1.5] 2. Task Assignation & Parallelization (Crew).  [v1.5] Looking at all the stories and their tasks, organize the work based on the team.  definition. Parallelizing work when possible.. 
Gantt Creation (Good old programming).  Based on the estimations, and roles (assuming one person in each role), graph the work..  [v1.5] 4. Task Creation in Jira (Good old programming).  Create tasks. The due date takes into account the team structure.  B. Use Case Diagrams.  Include use case diagrams to visually represent the interactions between users and the.  software tool..  General diagram.  CrewAI async process definition.  C. Open Issues.  Document any open issues or questions that need to be resolved during the development.  process.. 
Questions for the CrewAI Team.  Recommendations for streaming information to a web UI, when running crewAI.  open-source version..  » An immediate challenge we’ve seen is the inability to capture the output of tasks, agents,.  and crews into easy-to-handle objects. Is the API the only way?.  » Ok, found step_callback, testing now..  » Doesn’t work as I expected. I get the results, not the logs. Will ask for recommendations..  Running agents as tasks in celery vs async in threads..  Can we control at a specific detail the behaviour of the agents in the crew? Check the.  current crewAI diagram. Can we trust the crew will understand some agents can work.  in parallel and how the output of one agent is to be used by the next one..  Missing documentation regarding async crew management..  A lot of repeated messages on each execution, not sure if agents are run more times.  than expected. Is there some logging we can obtain regarding agent executions,.  model requests, etc. so we can ensure the proper behaviour of the crew?.  » Por lo que tengo entendido, no hay un log. Online solo veo que el equipo recomienda el.  step_callback. Quizá en la version API..  Generally, we want to understand the “Product Intent” of CrewAI. Two main areas:.  A).  Productization.  a).  Is the intent to productize only the API version, whilst OS is used for.  B2D?.  b).  If not, will the OS version be production-ready in the near future / what’s.  the short-term roadmap..  B).  Observability..  a).  Similarly, is the intent to go in this direction? Dashboards, AR, or.  depend on 3rd parties like AgentOps.  b).  Any of -> Predictavility, Guardrails, evaluation of outputs <- intended to.  be on the product..  Final q. Honestly, if not now we want to take on a project using CrewAI in the future..  Do you think it’s best to hold until more of it is productized?

"""


#Replace agent_output content with whichever final output you want to test(EPICS,FEATURES or USER STORIES)
agent_output ="""

Thank you all for your valuable insights and suggestions. Based on your contributions, I will refine the user stories and incorporate additional user stories to ensure comprehensive coverage of the project's requirements. Here's the aggregated list of user stories, now enhanced with the insights provided by each of you.

### FINAL USER STORIES FOR ALL EPICS

1. **Automated Task Creation and Reporting**
   - As a **project manager**, I want the system to use NLP to automatically generate tasks based on user stories, so that I can save time on manual task creation.
   - As a **user**, I want to receive immediate visual feedback confirming task creation or errors, so that I feel informed.
   - As a **team leader**, I want to customize reporting templates, so that I can generate reports based on different needs.
   - As a **user**, I want a tutorial on how the NLP feature works, so that I can leverage it effectively.
   - As a **developer**, I want to train and evaluate an NLP model for improved task generation accuracy, so that I can enhance system performance.
   - As a **user**, I want to receive suggestions for task optimization based on previous task data, so that I can improve my workflow.

2. **Dynamic Gantt Chart**
   - As a **project manager**, I want to interactively drag and drop tasks on the Gantt chart, so that I can easily adjust timelines.
   - As a **user**, I want real-time updates on the Gantt chart, so I can stay aware of current project statuses.
   - As a **user**, I want the Gantt chart to have a minimalist design that's responsive, so that I can view details clearly.
   - As a **user**, I want to customize what details are displayed in the Gantt chart, so that I can focus on the most relevant tasks.
   - As a **user**, I want to undo or redo changes in the Gantt chart, so that I can easily correct mistakes.

3. **Automated Meeting Scheduling and Communication**
   - As a **team member**, I want to use calendar API integration to schedule meetings based on availability, so that I can organize times that work for everyone.
   - As a **user**, I want visual notifications for upcoming meetings and overdue responses, so that I can stay informed.
   - As a **user**, I want to customize reminder settings for meetings, so that I can choose how and when I receive notifications.
   - As a **user**, I want to see a summary of my meeting preferences within the settings, so that I can quickly manage notifications.
   - As a **user**, I want to view my calendar alongside others to find optimal meeting times visually, so that I can minimize conflicts.

4. **Integration with Existing Tools**
   - As a **user**, I want secure API integration with tools like Jira and Slack, so that I can streamline my workflow.
   - As a **user**, I want to see real-time integration status indicators, so that I can monitor the health of integrations.
   - As a **new user**, I want onboarding guidance to set up integrations, so that I can get started without confusion.
   - As a **user**, I want guided steps for connecting with integrations, so that I can link my tools without assistance.
   - As a **user**, I want to receive notifications if an integration fails, so that I can be alerted to issues promptly.

5. **Analytics Dashboard and Insights**
   - As a **project manager**, I want to visualize data through charts and graphs on the dashboard, so that I can assess project health quickly.
   - As a **user**, I want to filter data interactively on the analytics dashboard, so that I can focus on specific insights.
   - As a **user**, I want to export dashboard data in various formats (PDF, CSV), so that I can share insights.
   - As a **user**, I want a customizable dashboard layout, so that I can arrange metrics and graphs according to my preference.
   - As a **project manager**, I want to set thresholds for key metrics so that I can receive alerts when they are surpassed.
   - As a **user researcher**, I want to conduct usability testing on the automated task creation feature to validate its intuitive use, so that we can refine based on feedback.
   - As a **user researcher**, I want to gather feedback on the Gantt chart's design and interactivity through A/B testing, to ensure we're meeting user needs effectively.

---

Thank you for your collaboration! If there are any further comments or adjustments needed, please feel free to share. If everything looks good, we can proceed to prioritize these user stories for our upcoming sprint planning.
"""

#Semantic Chunking Based on context of the prd document. Resource: https://python.langchain.com/v0.1/docs/modules/data_connection/document_transformers/semantic-chunker/
text_splitter = SemanticChunker(
    OpenAIEmbeddings(), breakpoint_threshold_type="percentile"
)

#Created a Langchain document type of list
docs = text_splitter.create_documents([prd_content])

#Converting that document into a normal list of string
prd_list = [doc.page_content for doc in docs]
prd_input = "\n".join(prd_list)  # Join the list into a single string

test_case1 = LLMTestCase(
    input=prd_input,  # Use the joined string as input
    actual_output=agent_output,
    retrieval_context=prd_list  # Use the list of string here(list of String type is required)
)

#LLM based Evaluation Definition
relevancy_metric = AnswerRelevancyMetric(threshold=0.7,verbose_mode=True)
faithfulness_metric = FaithfulnessMetric(threshold=0.8,verbose_mode=True)

user_story_structure_metric = GEval(
    name="User story Structure",
    criteria="Evaluate if the output follows the correct User story structure with main Feature titles and bullet points for User stories and Acceptance Criteria.",
    evaluation_params=[LLMTestCaseParams.ACTUAL_OUTPUT],
    threshold=0.8
)

content_coverage_metric = GEval(
    name="Content Coverage",
    criteria="Assess if the user story cover the main features and requirements mentioned in the PRD.",
    evaluation_params=[LLMTestCaseParams.INPUT, LLMTestCaseParams.ACTUAL_OUTPUT],
    threshold=0.75
)

def test_prd_epic_extraction():
    assert_test(test_case1, [
        relevancy_metric, 
        faithfulness_metric, 
        user_story_structure_metric, 
        content_coverage_metric
    ])

#After deepeval setup according to documentation, you can run this in terminal with:
#deepeval test run test_deepeval.py

